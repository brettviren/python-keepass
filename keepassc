#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''
Command line interface to read keepass files
'''
import sys
import os
from keepasslib import baker


def get_password(prompt, twice=False):
    """Get password with getpass(), asking for it twice if needed."""
    import getpass
    password1 = None
    if twice:
        password2 = None
        while password1 is None or (password1 != password2):
            password1 = getpass.getpass(prompt+': ')
            password2 = getpass.getpass(prompt+' (again):')
            if password1 != password2:
                sys.stderr.write("Error: Your passwords didn't match\n")
    else:
        password1 = getpass.getpass(prompt+': ')
    return password1


def get_masterkey():
    return get_password('Keepass masterkey')


def open_keepass_db(filename):
    """Open a keepass database."""
    from keepasslib import kpdb
    print "Opening keepass database", os.path.basename(filename), "..."
    return kpdb.Database(filename, get_masterkey())


shortopts = {'show-passwords': 'p'}
params = {'show-passwords': 'Show passwords as plain text.'}
@baker.command(shortopts=shortopts, params=params)
def dump(dbfile, *dbfiles, **kwargs):
    """Print contents of keepass databases."""
    allfiles = (dbfile,) + dbfiles
    show_passwords = kwargs.get('show-passwords')
    for filename in allfiles:
        db = open_keepass_db(filename)
        print db.hierarchy().dump(show_passwords=show_passwords)


@baker.command(default=True, shortopts=shortopts, params=params)
def search(key, dbfile, *dbfiles, **kwargs):
    """Searches given key in all entries in keepass databases."""
    allfiles = (dbfile,) + dbfiles
    show_passwords = kwargs.get('show-passwords')
    for filename in allfiles:
        db = open_keepass_db(filename)
        for entry in db.search(key, search_passwords=show_passwords):
            format = "%(path)s%(title)s: user=%(username)r pass=%(password)r"
            print entry.strformat(format, show_passwords=show_passwords)


try:
    sys.exit(baker.run())
except baker.CommandError, msg:
    print >>sys.stderr, "keepassc error:", msg
    baker.help(sys.argv[0])
    sys.exit(1)
